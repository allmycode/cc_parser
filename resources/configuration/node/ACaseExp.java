/* This file was generated by SableCC (http://www.sablecc.org/). */

package configuration.node;

import java.util.*;
import configuration.analysis.*;

@SuppressWarnings("nls")
public final class ACaseExp extends PExp
{
    private TId _name_;
    private final LinkedList<PCaseVariant> _caseVariant_ = new LinkedList<PCaseVariant>();

    public ACaseExp()
    {
        // Constructor
    }

    public ACaseExp(
        @SuppressWarnings("hiding") TId _name_,
        @SuppressWarnings("hiding") List<?> _caseVariant_)
    {
        // Constructor
        setName(_name_);

        setCaseVariant(_caseVariant_);

    }

    @Override
    public Object clone()
    {
        return new ACaseExp(
            cloneNode(this._name_),
            cloneList(this._caseVariant_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseACaseExp(this);
    }

    public TId getName()
    {
        return this._name_;
    }

    public void setName(TId node)
    {
        if(this._name_ != null)
        {
            this._name_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._name_ = node;
    }

    public LinkedList<PCaseVariant> getCaseVariant()
    {
        return this._caseVariant_;
    }

    public void setCaseVariant(List<?> list)
    {
        for(PCaseVariant e : this._caseVariant_)
        {
            e.parent(null);
        }
        this._caseVariant_.clear();

        for(Object obj_e : list)
        {
            PCaseVariant e = (PCaseVariant) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._caseVariant_.add(e);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._name_)
            + toString(this._caseVariant_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._name_ == child)
        {
            this._name_ = null;
            return;
        }

        if(this._caseVariant_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._name_ == oldChild)
        {
            setName((TId) newChild);
            return;
        }

        for(ListIterator<PCaseVariant> i = this._caseVariant_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PCaseVariant) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}
