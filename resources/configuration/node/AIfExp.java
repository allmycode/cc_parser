/* This file was generated by SableCC (http://www.sablecc.org/). */

package configuration.node;

import configuration.analysis.*;

@SuppressWarnings("nls")
public final class AIfExp extends PExp
{
    private PExp _if_;
    private PExp _thenPart_;
    private PExp _elsePart_;

    public AIfExp()
    {
        // Constructor
    }

    public AIfExp(
        @SuppressWarnings("hiding") PExp _if_,
        @SuppressWarnings("hiding") PExp _thenPart_,
        @SuppressWarnings("hiding") PExp _elsePart_)
    {
        // Constructor
        setIf(_if_);

        setThenPart(_thenPart_);

        setElsePart(_elsePart_);

    }

    @Override
    public Object clone()
    {
        return new AIfExp(
            cloneNode(this._if_),
            cloneNode(this._thenPart_),
            cloneNode(this._elsePart_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAIfExp(this);
    }

    public PExp getIf()
    {
        return this._if_;
    }

    public void setIf(PExp node)
    {
        if(this._if_ != null)
        {
            this._if_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._if_ = node;
    }

    public PExp getThenPart()
    {
        return this._thenPart_;
    }

    public void setThenPart(PExp node)
    {
        if(this._thenPart_ != null)
        {
            this._thenPart_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._thenPart_ = node;
    }

    public PExp getElsePart()
    {
        return this._elsePart_;
    }

    public void setElsePart(PExp node)
    {
        if(this._elsePart_ != null)
        {
            this._elsePart_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._elsePart_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._if_)
            + toString(this._thenPart_)
            + toString(this._elsePart_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._if_ == child)
        {
            this._if_ = null;
            return;
        }

        if(this._thenPart_ == child)
        {
            this._thenPart_ = null;
            return;
        }

        if(this._elsePart_ == child)
        {
            this._elsePart_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._if_ == oldChild)
        {
            setIf((PExp) newChild);
            return;
        }

        if(this._thenPart_ == oldChild)
        {
            setThenPart((PExp) newChild);
            return;
        }

        if(this._elsePart_ == oldChild)
        {
            setElsePart((PExp) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
