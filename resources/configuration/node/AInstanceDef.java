/* This file was generated by SableCC (http://www.sablecc.org/). */

package configuration.node;

import java.util.*;
import configuration.analysis.*;

@SuppressWarnings("nls")
public final class AInstanceDef extends PDef
{
    private TId _o_;
    private TId _t_;
    private final LinkedList<PExpdef> _expdef_ = new LinkedList<PExpdef>();

    public AInstanceDef()
    {
        // Constructor
    }

    public AInstanceDef(
        @SuppressWarnings("hiding") TId _o_,
        @SuppressWarnings("hiding") TId _t_,
        @SuppressWarnings("hiding") List<?> _expdef_)
    {
        // Constructor
        setO(_o_);

        setT(_t_);

        setExpdef(_expdef_);

    }

    @Override
    public Object clone()
    {
        return new AInstanceDef(
            cloneNode(this._o_),
            cloneNode(this._t_),
            cloneList(this._expdef_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAInstanceDef(this);
    }

    public TId getO()
    {
        return this._o_;
    }

    public void setO(TId node)
    {
        if(this._o_ != null)
        {
            this._o_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._o_ = node;
    }

    public TId getT()
    {
        return this._t_;
    }

    public void setT(TId node)
    {
        if(this._t_ != null)
        {
            this._t_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._t_ = node;
    }

    public LinkedList<PExpdef> getExpdef()
    {
        return this._expdef_;
    }

    public void setExpdef(List<?> list)
    {
        for(PExpdef e : this._expdef_)
        {
            e.parent(null);
        }
        this._expdef_.clear();

        for(Object obj_e : list)
        {
            PExpdef e = (PExpdef) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._expdef_.add(e);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._o_)
            + toString(this._t_)
            + toString(this._expdef_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._o_ == child)
        {
            this._o_ = null;
            return;
        }

        if(this._t_ == child)
        {
            this._t_ = null;
            return;
        }

        if(this._expdef_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._o_ == oldChild)
        {
            setO((TId) newChild);
            return;
        }

        if(this._t_ == oldChild)
        {
            setT((TId) newChild);
            return;
        }

        for(ListIterator<PExpdef> i = this._expdef_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PExpdef) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}
