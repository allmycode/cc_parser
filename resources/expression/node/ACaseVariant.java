/* This file was generated by SableCC (http://www.sablecc.org/). */

package expression.node;

import expression.analysis.*;

@SuppressWarnings("nls")
public final class ACaseVariant extends PCaseVariant
{
    private PExp _condition_;
    private PExp _outcome_;

    public ACaseVariant()
    {
        // Constructor
    }

    public ACaseVariant(
        @SuppressWarnings("hiding") PExp _condition_,
        @SuppressWarnings("hiding") PExp _outcome_)
    {
        // Constructor
        setCondition(_condition_);

        setOutcome(_outcome_);

    }

    @Override
    public Object clone()
    {
        return new ACaseVariant(
            cloneNode(this._condition_),
            cloneNode(this._outcome_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseACaseVariant(this);
    }

    public PExp getCondition()
    {
        return this._condition_;
    }

    public void setCondition(PExp node)
    {
        if(this._condition_ != null)
        {
            this._condition_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._condition_ = node;
    }

    public PExp getOutcome()
    {
        return this._outcome_;
    }

    public void setOutcome(PExp node)
    {
        if(this._outcome_ != null)
        {
            this._outcome_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._outcome_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._condition_)
            + toString(this._outcome_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._condition_ == child)
        {
            this._condition_ = null;
            return;
        }

        if(this._outcome_ == child)
        {
            this._outcome_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._condition_ == oldChild)
        {
            setCondition((PExp) newChild);
            return;
        }

        if(this._outcome_ == oldChild)
        {
            setOutcome((PExp) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
